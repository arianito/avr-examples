
AVRASM ver. 2.1.30  C:\projects\keyb\Debug\List\main.asm Tue Nov 21 16:42:06 2017

C:\projects\keyb\Debug\List\main.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\projects\keyb\Debug\List\main.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\projects\keyb\Debug\List\main.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\projects\keyb\Debug\List\main.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\projects\keyb\Debug\List\main.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _page=R5
                 	.DEF _keyboard=R4
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0080 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0001      	.DW  0x0001
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000      	.DB  0x0,0x0
                 
                 _0x3:
000035 000a
000036 0c0b
000037 0201
000038 0d03      	.DB  0xA,0x0,0xB,0xC,0x1,0x2,0x3,0xD
000039 0504
00003a 0e06
00003b 0807
00003c 0f09      	.DB  0x4,0x5,0x6,0xE,0x7,0x8,0x9,0xF
                 _0x0:
00003d 434c
00003e 2044
00003f 6554
000040 7473      	.DB  0x4C,0x43,0x44,0x20,0x54,0x65,0x73,0x74
000041 2021
000042 6548
000043 6c6c
000044 206f      	.DB  0x21,0x20,0x48,0x65,0x6C,0x6C,0x6F,0x20
000045 5000
000046 6572
000047 7373
000048 4f20      	.DB  0x0,0x50,0x72,0x65,0x73,0x73,0x20,0x4F
000049 2e4e
00004a 202e
00004b 4500
00004c 746e      	.DB  0x4E,0x2E,0x2E,0x20,0x0,0x45,0x6E,0x74
00004d 7265
00004e 7920
00004f 756f
000050 2072      	.DB  0x65,0x72,0x20,0x79,0x6F,0x75,0x72,0x20
000051 6577
000052 6769
000053 7468
000054 003a      	.DB  0x77,0x65,0x69,0x67,0x68,0x74,0x3A,0x0
000055 6925
000056 0020
000057 6854
000058 7369      	.DB  0x25,0x69,0x20,0x0,0x54,0x68,0x69,0x73
000059 6920
00005a 2073
00005b 6170
00005c 6567      	.DB  0x20,0x69,0x73,0x20,0x70,0x61,0x67,0x65
00005d 3320
00005e 6800
00005f 6861
000060 2e61      	.DB  0x20,0x33,0x0,0x68,0x61,0x68,0x61,0x2E
000061 202e
C:\projects\keyb\Debug\List\main.asm(1150): warning: .cseg .db misalignment - padding zero byte
000062 0000      	.DB  0x2E,0x20,0x0
                 _0x2000003:
000063 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000064 0001      	.DW  0x01
000065 0002      	.DW  0x02
000066 0066      	.DW  __REG_BIT_VARS*2
                 
000067 0002      	.DW  0x02
000068 0004      	.DW  0x04
000069 0068      	.DW  __REG_VARS*2
                 
00006a 0010      	.DW  0x10
00006b 01b7      	.DW  _map
00006c 006a      	.DW  _0x3*2
                 
00006d 0011      	.DW  0x11
00006e 0160      	.DW  _0x11
00006f 007a      	.DW  _0x0*2
                 
000070 000c      	.DW  0x0C
000071 0171      	.DW  _0x11+17
000072 008b      	.DW  _0x0*2+17
                 
000073 0013      	.DW  0x13
000074 017d      	.DW  _0x11+29
000075 0097      	.DW  _0x0*2+29
                 
000076 000f      	.DW  0x0F
000077 0190      	.DW  _0x11+48
000078 00ae      	.DW  _0x0*2+52
                 
000079 0008      	.DW  0x08
00007a 019f      	.DW  _0x11+63
00007b 00bd      	.DW  _0x0*2+67
                 
00007c 0002      	.DW  0x02
00007d 01c7      	.DW  __base_y_G100
00007e 00c6      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00007f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000080 94f8      	CLI
000081 27ee      	CLR  R30
000082 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000083 e0f1      	LDI  R31,1
000084 bffb      	OUT  GICR,R31
000085 bfeb      	OUT  GICR,R30
000086 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000087 e08d      	LDI  R24,(14-2)+1
000088 e0a2      	LDI  R26,2
000089 27bb      	CLR  R27
                 __CLEAR_REG:
00008a 93ed      	ST   X+,R30
00008b 958a      	DEC  R24
00008c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00008d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00008e e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00008f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000090 93ed      	ST   X+,R30
000091 9701      	SBIW R24,1
000092 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000093 ece8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000094 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000095 9185      	LPM  R24,Z+
000096 9195      	LPM  R25,Z+
000097 9700      	SBIW R24,0
000098 f061      	BREQ __GLOBAL_INI_END
000099 91a5      	LPM  R26,Z+
00009a 91b5      	LPM  R27,Z+
00009b 9005      	LPM  R0,Z+
00009c 9015      	LPM  R1,Z+
00009d 01bf      	MOVW R22,R30
00009e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00009f 9005      	LPM  R0,Z+
0000a0 920d      	ST   X+,R0
0000a1 9701      	SBIW R24,1
0000a2 f7e1      	BRNE __GLOBAL_INI_LOOP
0000a3 01fb      	MOVW R30,R22
0000a4 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000a5 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000a6 bfed      	OUT  SPL,R30
0000a7 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a8 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a9 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000aa e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ab 940c 00dc 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;
                 ;
                 ;unsigned char buffer[16];
                 ;
                 ;unsigned char page = 0;
                 ;unsigned char keyboard = 0;
                 ;bit update = 1;
                 ;
                 ;unsigned char map[] = {10,0,11,12,1,2,3,13,4,5,6,14,7,8,9,15};
                 
                 	.DSEG
                 ;
                 ;#define GOTO(p) page=p; update=1;
                 ;#define UPDATE() update=1;
                 ;
                 ;
                 ;char read(){
                 ; 0000 0014 char read(){
                 
                 	.CSEG
                 _read:
                 ; .FSTART _read
                 ; 0000 0015 
                 ; 0000 0016 	unsigned char r, c;
                 ; 0000 0017 	PORTD |= 0x0f;
0000ad 931a      	ST   -Y,R17
0000ae 930a      	ST   -Y,R16
                 ;	r -> R17
                 ;	c -> R16
0000af b3e2      	IN   R30,0x12
0000b0 60ef      	ORI  R30,LOW(0xF)
0000b1 bbe2      	OUT  0x12,R30
                 ; 0000 0018 
                 ; 0000 0019 	for(c=0;c<4;c++){
0000b2 e000      	LDI  R16,LOW(0)
                 _0x5:
0000b3 3004      	CPI  R16,4
0000b4 f518      	BRSH _0x6
                 ; 0000 001A 		DDRD = 0x00;
0000b5 e0e0      	LDI  R30,LOW(0)
0000b6 bbe1      	OUT  0x11,R30
                 ; 0000 001B 		DDRD |= 0x80 >> c;
0000b7 b211      	IN   R1,17
0000b8 2fe0      	MOV  R30,R16
0000b9 e8a0      	LDI  R26,LOW(128)
0000ba 940e 0407 	CALL __LSRB12
0000bc 29e1      	OR   R30,R1
0000bd bbe1      	OUT  0x11,R30
                 ; 0000 001C 		for(r=0;r<4;r++){
0000be e010      	LDI  R17,LOW(0)
                 _0x8:
0000bf 3014      	CPI  R17,4
0000c0 f4a8      	BRSH _0x9
                 ; 0000 001D 			if(!(PIND & (0x08 >> r))){
0000c1 b210      	IN   R1,16
0000c2 2fe1      	MOV  R30,R17
0000c3 e0a8      	LDI  R26,LOW(8)
0000c4 940e 0407 	CALL __LSRB12
0000c6 21e1      	AND  R30,R1
0000c7 f461      	BRNE _0xA
                 ; 0000 001E 				return map[r*4+c];
0000c8 e0e4      	LDI  R30,LOW(4)
0000c9 9fe1      	MUL  R30,R17
0000ca 01f0      	MOVW R30,R0
0000cb 01df      	MOVW R26,R30
0000cc 2fe0      	MOV  R30,R16
0000cd e0f0      	LDI  R31,0
0000ce 0fea      	ADD  R30,R26
0000cf 1ffb      	ADC  R31,R27
0000d0 54e9      	SUBI R30,LOW(-_map)
0000d1 4ffe      	SBCI R31,HIGH(-_map)
0000d2 81e0      	LD   R30,Z
0000d3 c005      	RJMP _0x2080003
                 ; 0000 001F 			}
                 ; 0000 0020 		}
                 _0xA:
0000d4 5f1f      	SUBI R17,-1
0000d5 cfe9      	RJMP _0x8
                 _0x9:
                 ; 0000 0021 	}
0000d6 5f0f      	SUBI R16,-1
0000d7 cfdb      	RJMP _0x5
                 _0x6:
                 ; 0000 0022 
                 ; 0000 0023 	return 0xff;
0000d8 efef      	LDI  R30,LOW(255)
                 _0x2080003:
0000d9 9109      	LD   R16,Y+
0000da 9119      	LD   R17,Y+
0000db 9508      	RET
                 ; 0000 0024 
                 ; 0000 0025 }
                 ; .FEND
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0029 {
                 _main:
                 ; .FSTART _main
                 ; 0000 002A 
                 ; 0000 002B 
                 ; 0000 002C 
                 ; 0000 002D 	unsigned char last_key=0xff;
                 ; 0000 002E 	unsigned int weight = 0;
                 ; 0000 002F 
                 ; 0000 0030     lcd_init(16);
                 ;	last_key -> R17
                 ;	weight -> R18,R19
0000dc ef1f      	LDI  R17,255
                +
0000dd e020     +LDI R18 , LOW ( 0 )
0000de e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0000df e1a0      	LDI  R26,LOW(16)
0000e0 d0dd      	RCALL _lcd_init
                 ; 0000 0031     while (1)
                 _0xB:
                 ; 0000 0032     {
                 ; 0000 0033 
                 ; 0000 0034 		if(page == 0 && update){
0000e1 2055      	TST  R5
0000e2 f411      	BRNE _0xF
0000e3 fc20      	SBRC R2,0
0000e4 c001      	RJMP _0x10
                 _0xF:
0000e5 c009      	RJMP _0xE
                 _0x10:
                 ; 0000 0035 			lcd_clear();
0000e6 940e 03ad 	CALL SUBOPT_0x0
                 ; 0000 0036 			lcd_gotoxy(0,0);
                 ; 0000 0037 			lcd_puts("LCD Test! Hello ");
                +
0000e8 e6a0     +LDI R26 , LOW ( _0x11 + ( 0 ) )
0000e9 e0b1     +LDI R27 , HIGH ( _0x11 + ( 0 ) )
                 	__POINTW2MN _0x11,0
0000ea 940e 03b4 	CALL SUBOPT_0x1
                 ; 0000 0038 			lcd_gotoxy(0,1);
                 ; 0000 0039 			lcd_puts("Press ON.. ");
                +
0000ec e7a1     +LDI R26 , LOW ( _0x11 + ( 17 ) )
0000ed e0b1     +LDI R27 , HIGH ( _0x11 + ( 17 ) )
                 	__POINTW2MN _0x11,17
0000ee c02e      	RJMP _0x2B
                 ; 0000 003A 			update = 0;
                 ; 0000 003B 		}else if(page == 1 && update){
                 _0xE:
0000ef e0e1      	LDI  R30,LOW(1)
0000f0 15e5      	CP   R30,R5
0000f1 f411      	BRNE _0x14
0000f2 fc20      	SBRC R2,0
0000f3 c001      	RJMP _0x15
                 _0x14:
0000f4 c01a      	RJMP _0x13
                 _0x15:
                 ; 0000 003C 			lcd_clear();
0000f5 940e 03ad 	CALL SUBOPT_0x0
                 ; 0000 003D 			lcd_gotoxy(0,0);
                 ; 0000 003E 			lcd_puts("Enter your weight:");
                +
0000f7 e7ad     +LDI R26 , LOW ( _0x11 + ( 29 ) )
0000f8 e0b1     +LDI R27 , HIGH ( _0x11 + ( 29 ) )
                 	__POINTW2MN _0x11,29
0000f9 940e 03b4 	CALL SUBOPT_0x1
                 ; 0000 003F 			lcd_gotoxy(0,1);
                 ; 0000 0040 			sprintf(buffer, "%i ", weight);
0000fb eae7      	LDI  R30,LOW(_buffer)
0000fc e0f1      	LDI  R31,HIGH(_buffer)
0000fd 93fa      	ST   -Y,R31
0000fe 93ea      	ST   -Y,R30
                +
0000ff eaea     +LDI R30 , LOW ( 2 * _0x0 + ( 48 ) )
000100 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 48 ) )
                 	__POINTW1FN _0x0,48
000101 93fa      	ST   -Y,R31
000102 93ea      	ST   -Y,R30
000103 01f9      	MOVW R30,R18
000104 2766      	CLR  R22
000105 2777      	CLR  R23
000106 940e 0417 	CALL __PUTPARD1
000108 e084      	LDI  R24,4
000109 940e 0360 	CALL _sprintf
00010b 9628      	ADIW R28,8
                 ; 0000 0041 			lcd_puts(buffer);
00010c eaa7      	LDI  R26,LOW(_buffer)
00010d e0b1      	LDI  R27,HIGH(_buffer)
00010e c00e      	RJMP _0x2B
                 ; 0000 0042 			update = 0;
                 ; 0000 0043 		} else if(page == 2 && update){
                 _0x13:
00010f e0e2      	LDI  R30,LOW(2)
000110 15e5      	CP   R30,R5
000111 f411      	BRNE _0x18
000112 fc20      	SBRC R2,0
000113 c001      	RJMP _0x19
                 _0x18:
000114 c00b      	RJMP _0x17
                 _0x19:
                 ; 0000 0044 			lcd_clear();
000115 940e 03ad 	CALL SUBOPT_0x0
                 ; 0000 0045 			lcd_gotoxy(0,0);
                 ; 0000 0046 			lcd_puts("This is page 3");
                +
000117 e9a0     +LDI R26 , LOW ( _0x11 + ( 48 ) )
000118 e0b1     +LDI R27 , HIGH ( _0x11 + ( 48 ) )
                 	__POINTW2MN _0x11,48
000119 940e 03b4 	CALL SUBOPT_0x1
                 ; 0000 0047 			lcd_gotoxy(0,1);
                 ; 0000 0048 			lcd_puts("haha.. ");
                +
00011b e9af     +LDI R26 , LOW ( _0x11 + ( 63 ) )
00011c e0b1     +LDI R27 , HIGH ( _0x11 + ( 63 ) )
                 	__POINTW2MN _0x11,63
                 _0x2B:
00011d d08f      	RCALL _lcd_puts
                 ; 0000 0049 			update = 0;
00011e 94e8      	CLT
00011f f820      	BLD  R2,0
                 ; 0000 004A 		}
                 ; 0000 004B 
                 ; 0000 004C 		switch(page){
                 _0x17:
000120 2de5      	MOV  R30,R5
000121 e0f0      	LDI  R31,0
                 ; 0000 004D 			case 0:
000122 9730      	SBIW R30,0
000123 f489      	BRNE _0x1D
                 ; 0000 004E 				keyboard = read();
000124 df88      	RCALL _read
000125 2e4e      	MOV  R4,R30
                 ; 0000 004F 				if(keyboard != 0xff && keyboard != last_key){
000126 efef      	LDI  R30,LOW(255)
000127 15e4      	CP   R30,R4
000128 f011      	BREQ _0x1F
000129 1514      	CP   R17,R4
00012a f409      	BRNE _0x20
                 _0x1F:
00012b c008      	RJMP _0x1E
                 _0x20:
                 ; 0000 0050 					if(keyboard == 10)
00012c e0ea      	LDI  R30,LOW(10)
00012d 15e4      	CP   R30,R4
00012e f411      	BRNE _0x21
                 ; 0000 0051 						GOTO(1);
00012f e0e1      	LDI  R30,LOW(1)
000130 2e5e      	MOV  R5,R30
                 _0x21:
000131 9468      	SET
000132 f820      	BLD  R2,0
                 ; 0000 0052 					last_key = keyboard;
000133 2d14      	MOV  R17,R4
                 ; 0000 0053 				}
                 ; 0000 0054 				break;
                 _0x1E:
000134 c028      	RJMP _0x1C
                 ; 0000 0055 			case 1:
                 _0x1D:
000135 30e1      	CPI  R30,LOW(0x1)
000136 e0a0      	LDI  R26,HIGH(0x1)
000137 07fa      	CPC  R31,R26
000138 f521      	BRNE _0x1C
                 ; 0000 0056 
                 ; 0000 0057         		keyboard = read();
000139 df73      	RCALL _read
00013a 2e4e      	MOV  R4,R30
                 ; 0000 0058 				if(keyboard != 0xff && keyboard != last_key){
00013b efef      	LDI  R30,LOW(255)
00013c 15e4      	CP   R30,R4
00013d f011      	BREQ _0x24
00013e 1514      	CP   R17,R4
00013f f409      	BRNE _0x25
                 _0x24:
000140 c01c      	RJMP _0x23
                 _0x25:
                 ; 0000 0059 					if(keyboard >= 0 && keyboard <= 9){
000141 e0e0      	LDI  R30,LOW(0)
000142 164e      	CP   R4,R30
000143 f018      	BRLO _0x27
000144 e0e9      	LDI  R30,LOW(9)
000145 15e4      	CP   R30,R4
000146 f408      	BRSH _0x28
                 _0x27:
000147 c00d      	RJMP _0x26
                 _0x28:
                 ; 0000 005A 						weight = weight * 10 + keyboard;
                +
000148 e0aa     +LDI R26 , 10
000149 9fa2     +MUL R26 , R18
00014a 01f0     +MOVW R30 , R0
00014b 9fa3     +MUL R26 , R19
00014c 0df0     +ADD R31 , R0
                 	__MULBNWRU 18,19,10
00014d 01df      	MOVW R26,R30
00014e 2de4      	MOV  R30,R4
00014f e0f0      	LDI  R31,0
000150 0fea      	ADD  R30,R26
000151 1ffb      	ADC  R31,R27
000152 019f      	MOVW R18,R30
                 ; 0000 005B 						UPDATE();
000153 9468      	SET
000154 f820      	BLD  R2,0
                 ; 0000 005C 					}
                 ; 0000 005D 					if(keyboard == 15){
                 _0x26:
000155 e0ef      	LDI  R30,LOW(15)
000156 15e4      	CP   R30,R4
000157 f421      	BRNE _0x29
                 ; 0000 005E 						GOTO(2);
000158 e0e2      	LDI  R30,LOW(2)
000159 2e5e      	MOV  R5,R30
00015a 9468      	SET
00015b f820      	BLD  R2,0
                 ; 0000 005F 					}
                 ; 0000 0060 					last_key = keyboard;
                 _0x29:
00015c 2d14      	MOV  R17,R4
                 ; 0000 0061 				}
                 ; 0000 0062 				break;
                 _0x23:
                 ; 0000 0063 
                 ; 0000 0064 		}
                 _0x1C:
                 ; 0000 0065 
                 ; 0000 0066     }
00015d cf83      	RJMP _0xB
                 ; 0000 0067 }
                 _0x2A:
00015e cfff      	RJMP _0x2A
                 ; .FEND
                 
                 	.DSEG
                 _0x11:
000160           	.BYTE 0x47
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00015f 93aa      	ST   -Y,R26
000160 b3e5      	IN   R30,0x15
000161 70ef      	ANDI R30,LOW(0xF)
000162 2fae      	MOV  R26,R30
000163 81e8      	LD   R30,Y
000164 7fe0      	ANDI R30,LOW(0xF0)
000165 2bea      	OR   R30,R26
000166 bbe5      	OUT  0x15,R30
                +
000167 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000168 958a     +DEC R24
000169 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00016a 9aaa      	SBI  0x15,2
                +
00016b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00016c 958a     +DEC R24
00016d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00016e 98aa      	CBI  0x15,2
                +
00016f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000170 958a     +DEC R24
000171 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000172 c077      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000173 93aa      	ST   -Y,R26
000174 81a8      	LD   R26,Y
000175 dfe9      	RCALL __lcd_write_nibble_G100
000176 81e8          ld    r30,y
000177 95e2          swap  r30
000178 83e8          st    y,r30
000179 81a8      	LD   R26,Y
00017a dfe4      	RCALL __lcd_write_nibble_G100
                +
00017b e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00017c 958a     +DEC R24
00017d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00017e c06b      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00017f 93aa      	ST   -Y,R26
000180 81e8      	LD   R30,Y
000181 e0f0      	LDI  R31,0
000182 53e9      	SUBI R30,LOW(-__base_y_G100)
000183 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000184 81e0      	LD   R30,Z
000185 81a9      	LDD  R26,Y+1
000186 0fae      	ADD  R26,R30
000187 dfeb      	RCALL __lcd_write_data
000188 8079      	LDD  R7,Y+1
000189 8068      	LDD  R6,Y+0
00018a 9622      	ADIW R28,2
00018b 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00018c e0a2      	LDI  R26,LOW(2)
00018d 940e 03bb 	CALL SUBOPT_0x2
00018f e0ac      	LDI  R26,LOW(12)
000190 dfe2      	RCALL __lcd_write_data
000191 e0a1      	LDI  R26,LOW(1)
000192 940e 03bb 	CALL SUBOPT_0x2
000194 e0e0      	LDI  R30,LOW(0)
000195 2e6e      	MOV  R6,R30
000196 2e7e      	MOV  R7,R30
000197 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000198 93aa      	ST   -Y,R26
000199 81a8      	LD   R26,Y
00019a 30aa      	CPI  R26,LOW(0xA)
00019b f011      	BREQ _0x2000005
00019c 1479      	CP   R7,R9
00019d f048      	BRLO _0x2000004
                 _0x2000005:
00019e e0e0      	LDI  R30,LOW(0)
00019f 93ea      	ST   -Y,R30
0001a0 9463      	INC  R6
0001a1 2da6      	MOV  R26,R6
0001a2 dfdc      	RCALL _lcd_gotoxy
0001a3 81a8      	LD   R26,Y
0001a4 30aa      	CPI  R26,LOW(0xA)
0001a5 f409      	BRNE _0x2000007
0001a6 c043      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
0001a7 9473      	INC  R7
0001a8 9aa8      	SBI  0x15,0
0001a9 81a8      	LD   R26,Y
0001aa dfc8      	RCALL __lcd_write_data
0001ab 98a8      	CBI  0x15,0
0001ac c03d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001ad 93ba      	ST   -Y,R27
0001ae 93aa      	ST   -Y,R26
0001af 931a      	ST   -Y,R17
                 _0x2000008:
0001b0 81a9      	LDD  R26,Y+1
0001b1 81ba      	LDD  R27,Y+1+1
0001b2 91ed      	LD   R30,X+
0001b3 83a9      	STD  Y+1,R26
0001b4 83ba      	STD  Y+1+1,R27
0001b5 2f1e      	MOV  R17,R30
0001b6 30e0      	CPI  R30,0
0001b7 f019      	BREQ _0x200000A
0001b8 2fa1      	MOV  R26,R17
0001b9 dfde      	RCALL _lcd_putchar
0001ba cff5      	RJMP _0x2000008
                 _0x200000A:
0001bb 8118      	LDD  R17,Y+0
0001bc 9623      	ADIW R28,3
0001bd 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001be 93aa      	ST   -Y,R26
0001bf b3e4      	IN   R30,0x14
0001c0 6fe0      	ORI  R30,LOW(0xF0)
0001c1 bbe4      	OUT  0x14,R30
0001c2 9aa2      	SBI  0x14,2
0001c3 9aa0      	SBI  0x14,0
0001c4 9aa1      	SBI  0x14,1
0001c5 98aa      	CBI  0x15,2
0001c6 98a8      	CBI  0x15,0
0001c7 98a9      	CBI  0x15,1
0001c8 8098      	LDD  R9,Y+0
0001c9 81e8      	LD   R30,Y
0001ca 58e0      	SUBI R30,-LOW(128)
                +
0001cb 93e0 01c9+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001cd 81e8      	LD   R30,Y
0001ce 54e0      	SUBI R30,-LOW(192)
                +
0001cf 93e0 01ca+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001d1 e1a4      	LDI  R26,LOW(20)
0001d2 e0b0      	LDI  R27,0
0001d3 940e 03f5 	CALL _delay_ms
0001d5 940e 03c1 	CALL SUBOPT_0x3
0001d7 940e 03c1 	CALL SUBOPT_0x3
0001d9 940e 03c1 	CALL SUBOPT_0x3
0001db e2a0      	LDI  R26,LOW(32)
0001dc df82      	RCALL __lcd_write_nibble_G100
                +
0001dd ec88     +LDI R24 , LOW ( 200 )
0001de e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001df 9701     +SBIW R24 , 1
0001e0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001e1 e2a8      	LDI  R26,LOW(40)
0001e2 df90      	RCALL __lcd_write_data
0001e3 e0a4      	LDI  R26,LOW(4)
0001e4 df8e      	RCALL __lcd_write_data
0001e5 e8a5      	LDI  R26,LOW(133)
0001e6 df8c      	RCALL __lcd_write_data
0001e7 e0a6      	LDI  R26,LOW(6)
0001e8 df8a      	RCALL __lcd_write_data
0001e9 dfa2      	RCALL _lcd_clear
                 _0x2080002:
0001ea 9621      	ADIW R28,1
0001eb 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0001ec 93ba      	ST   -Y,R27
0001ed 93aa      	ST   -Y,R26
0001ee 931a      	ST   -Y,R17
0001ef 930a      	ST   -Y,R16
0001f0 81aa      	LDD  R26,Y+2
0001f1 81bb      	LDD  R27,Y+2+1
0001f2 9612      	ADIW R26,2
0001f3 940e 040f 	CALL __GETW1P
0001f5 9730      	SBIW R30,0
0001f6 f159      	BREQ _0x2020010
0001f7 81aa      	LDD  R26,Y+2
0001f8 81bb      	LDD  R27,Y+2+1
0001f9 9614      	ADIW R26,4
0001fa 940e 040f 	CALL __GETW1P
0001fc 018f      	MOVW R16,R30
0001fd 9730      	SBIW R30,0
0001fe f061      	BREQ _0x2020012
                +
0001ff 3002     +CPI R16 , LOW ( 2 )
000200 e0e0     +LDI R30 , HIGH ( 2 )
000201 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000202 f098      	BRLO _0x2020013
000203 01f8      	MOVW R30,R16
000204 9731      	SBIW R30,1
000205 018f      	MOVW R16,R30
                +
000206 81aa     +LDD R26 , Y + 2
000207 81bb     +LDD R27 , Y + 2 + 1
000208 9614     +ADIW R26 , 4
000209 93ed     +ST X + , R30
00020a 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
00020b 81aa      	LDD  R26,Y+2
00020c 81bb      	LDD  R27,Y+2+1
00020d 9612      	ADIW R26,2
00020e 91ed      	LD   R30,X+
00020f 91fd      	LD   R31,X+
000210 9631      	ADIW R30,1
000211 93fe      	ST   -X,R31
000212 93ee      	ST   -X,R30
000213 9731      	SBIW R30,1
000214 81ac      	LDD  R26,Y+4
000215 83a0      	STD  Z+0,R26
                 _0x2020013:
000216 81aa      	LDD  R26,Y+2
000217 81bb      	LDD  R27,Y+2+1
000218 940e 040f 	CALL __GETW1P
00021a 23ff      	TST  R31
00021b f02a      	BRMI _0x2020014
00021c 91ed      	LD   R30,X+
00021d 91fd      	LD   R31,X+
00021e 9631      	ADIW R30,1
00021f 93fe      	ST   -X,R31
000220 93ee      	ST   -X,R30
                 _0x2020014:
000221 c006      	RJMP _0x2020015
                 _0x2020010:
000222 81aa      	LDD  R26,Y+2
000223 81bb      	LDD  R27,Y+2+1
000224 efef      	LDI  R30,LOW(65535)
000225 efff      	LDI  R31,HIGH(65535)
000226 93ed      	ST   X+,R30
000227 93fc      	ST   X,R31
                 _0x2020015:
000228 8119      	LDD  R17,Y+1
000229 8108      	LDD  R16,Y+0
00022a 9625      	ADIW R28,5
00022b 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
00022c 93ba      	ST   -Y,R27
00022d 93aa      	ST   -Y,R26
00022e 9726      	SBIW R28,6
00022f 940e 041c 	CALL __SAVELOCR6
000231 e010      	LDI  R17,0
000232 85ac      	LDD  R26,Y+12
000233 85bd      	LDD  R27,Y+12+1
000234 e0e0      	LDI  R30,LOW(0)
000235 e0f0      	LDI  R31,HIGH(0)
000236 93ed      	ST   X+,R30
000237 93fc      	ST   X,R31
                 _0x2020016:
000238 89ea      	LDD  R30,Y+18
000239 89fb      	LDD  R31,Y+18+1
00023a 9631      	ADIW R30,1
00023b 8bea      	STD  Y+18,R30
00023c 8bfb      	STD  Y+18+1,R31
00023d 9731      	SBIW R30,1
00023e 91e4      	LPM  R30,Z
00023f 2f2e      	MOV  R18,R30
000240 30e0      	CPI  R30,0
000241 f409      	BRNE PC+2
000242 c115      	RJMP _0x2020018
000243 2fe1      	MOV  R30,R17
000244 30e0      	CPI  R30,0
000245 f439      	BRNE _0x202001C
000246 3225      	CPI  R18,37
000247 f411      	BRNE _0x202001D
000248 e011      	LDI  R17,LOW(1)
000249 c002      	RJMP _0x202001E
                 _0x202001D:
00024a 940e 03c9 	CALL SUBOPT_0x4
                 _0x202001E:
00024c c10a      	RJMP _0x202001B
                 _0x202001C:
00024d 30e1      	CPI  R30,LOW(0x1)
00024e f4a9      	BRNE _0x202001F
00024f 3225      	CPI  R18,37
000250 f419      	BRNE _0x2020020
000251 940e 03c9 	CALL SUBOPT_0x4
000253 c102      	RJMP _0x20200CC
                 _0x2020020:
000254 e012      	LDI  R17,LOW(2)
000255 e040      	LDI  R20,LOW(0)
000256 e000      	LDI  R16,LOW(0)
000257 322d      	CPI  R18,45
000258 f411      	BRNE _0x2020021
000259 e001      	LDI  R16,LOW(1)
00025a c0fc      	RJMP _0x202001B
                 _0x2020021:
00025b 322b      	CPI  R18,43
00025c f411      	BRNE _0x2020022
00025d e24b      	LDI  R20,LOW(43)
00025e c0f8      	RJMP _0x202001B
                 _0x2020022:
00025f 3220      	CPI  R18,32
000260 f411      	BRNE _0x2020023
000261 e240      	LDI  R20,LOW(32)
000262 c0f4      	RJMP _0x202001B
                 _0x2020023:
000263 c002      	RJMP _0x2020024
                 _0x202001F:
000264 30e2      	CPI  R30,LOW(0x2)
000265 f439      	BRNE _0x2020025
                 _0x2020024:
000266 e050      	LDI  R21,LOW(0)
000267 e013      	LDI  R17,LOW(3)
000268 3320      	CPI  R18,48
000269 f411      	BRNE _0x2020026
00026a 6800      	ORI  R16,LOW(128)
00026b c0eb      	RJMP _0x202001B
                 _0x2020026:
00026c c003      	RJMP _0x2020027
                 _0x2020025:
00026d 30e3      	CPI  R30,LOW(0x3)
00026e f009      	BREQ PC+2
00026f c0e7      	RJMP _0x202001B
                 _0x2020027:
000270 3320      	CPI  R18,48
000271 f010      	BRLO _0x202002A
000272 332a      	CPI  R18,58
000273 f008      	BRLO _0x202002B
                 _0x202002A:
000274 c007      	RJMP _0x2020029
                 _0x202002B:
000275 e0aa      	LDI  R26,LOW(10)
000276 9f5a      	MUL  R21,R26
000277 2d50      	MOV  R21,R0
000278 2fe2      	MOV  R30,R18
000279 53e0      	SUBI R30,LOW(48)
00027a 0f5e      	ADD  R21,R30
00027b c0db      	RJMP _0x202001B
                 _0x2020029:
00027c 2fe2      	MOV  R30,R18
00027d 36e3      	CPI  R30,LOW(0x63)
00027e f449      	BRNE _0x202002F
00027f 940e 03d0 	CALL SUBOPT_0x5
000281 89e8      	LDD  R30,Y+16
000282 89f9      	LDD  R31,Y+16+1
000283 81a4      	LDD  R26,Z+4
000284 93aa      	ST   -Y,R26
000285 940e 03d6 	CALL SUBOPT_0x6
000287 c0ce      	RJMP _0x2020030
                 _0x202002F:
000288 37e3      	CPI  R30,LOW(0x73)
000289 f441      	BRNE _0x2020032
00028a 940e 03d0 	CALL SUBOPT_0x5
00028c 940e 03dc 	CALL SUBOPT_0x7
00028e 940e 0394 	CALL _strlen
000290 2f1e      	MOV  R17,R30
000291 c00a      	RJMP _0x2020033
                 _0x2020032:
000292 37e0      	CPI  R30,LOW(0x70)
000293 f461      	BRNE _0x2020035
000294 940e 03d0 	CALL SUBOPT_0x5
000296 940e 03dc 	CALL SUBOPT_0x7
000298 940e 03a0 	CALL _strlenf
00029a 2f1e      	MOV  R17,R30
00029b 6008      	ORI  R16,LOW(8)
                 _0x2020033:
00029c 6002      	ORI  R16,LOW(2)
00029d 770f      	ANDI R16,LOW(127)
00029e e030      	LDI  R19,LOW(0)
00029f c034      	RJMP _0x2020036
                 _0x2020035:
0002a0 36e4      	CPI  R30,LOW(0x64)
0002a1 f011      	BREQ _0x2020039
0002a2 36e9      	CPI  R30,LOW(0x69)
0002a3 f411      	BRNE _0x202003A
                 _0x2020039:
0002a4 6004      	ORI  R16,LOW(4)
0002a5 c002      	RJMP _0x202003B
                 _0x202003A:
0002a6 37e5      	CPI  R30,LOW(0x75)
0002a7 f431      	BRNE _0x202003C
                 _0x202003B:
0002a8 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0002a9 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0002aa 83ee      	STD  Y+6,R30
0002ab 83ff      	STD  Y+6+1,R31
0002ac e015      	LDI  R17,LOW(5)
0002ad c00c      	RJMP _0x202003D
                 _0x202003C:
0002ae 35e8      	CPI  R30,LOW(0x58)
0002af f411      	BRNE _0x202003F
0002b0 6008      	ORI  R16,LOW(8)
0002b1 c003      	RJMP _0x2020040
                 _0x202003F:
0002b2 37e8      	CPI  R30,LOW(0x78)
0002b3 f009      	BREQ PC+2
0002b4 c0a1      	RJMP _0x2020071
                 _0x2020040:
0002b5 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0002b6 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0002b7 83ee      	STD  Y+6,R30
0002b8 83ff      	STD  Y+6+1,R31
0002b9 e014      	LDI  R17,LOW(4)
                 _0x202003D:
0002ba ff02      	SBRS R16,2
0002bb c014      	RJMP _0x2020042
0002bc 940e 03d0 	CALL SUBOPT_0x5
0002be 940e 03e6 	CALL SUBOPT_0x8
0002c0 85ab      	LDD  R26,Y+11
0002c1 23aa      	TST  R26
0002c2 f43a      	BRPL _0x2020043
0002c3 85ea      	LDD  R30,Y+10
0002c4 85fb      	LDD  R31,Y+10+1
0002c5 940e 0403 	CALL __ANEGW1
0002c7 87ea      	STD  Y+10,R30
0002c8 87fb      	STD  Y+10+1,R31
0002c9 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0002ca 3040      	CPI  R20,0
0002cb f011      	BREQ _0x2020044
0002cc 5f1f      	SUBI R17,-LOW(1)
0002cd c001      	RJMP _0x2020045
                 _0x2020044:
0002ce 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0002cf c004      	RJMP _0x2020046
                 _0x2020042:
0002d0 940e 03d0 	CALL SUBOPT_0x5
0002d2 940e 03e6 	CALL SUBOPT_0x8
                 _0x2020046:
                 _0x2020036:
0002d4 fd00      	SBRC R16,0
0002d5 c011      	RJMP _0x2020047
                 _0x2020048:
0002d6 1715      	CP   R17,R21
0002d7 f478      	BRSH _0x202004A
0002d8 ff07      	SBRS R16,7
0002d9 c008      	RJMP _0x202004B
0002da ff02      	SBRS R16,2
0002db c004      	RJMP _0x202004C
0002dc 7f0b      	ANDI R16,LOW(251)
0002dd 2f24      	MOV  R18,R20
0002de 5011      	SUBI R17,LOW(1)
0002df c001      	RJMP _0x202004D
                 _0x202004C:
0002e0 e320      	LDI  R18,LOW(48)
                 _0x202004D:
0002e1 c001      	RJMP _0x202004E
                 _0x202004B:
0002e2 e220      	LDI  R18,LOW(32)
                 _0x202004E:
0002e3 940e 03c9 	CALL SUBOPT_0x4
0002e5 5051      	SUBI R21,LOW(1)
0002e6 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
0002e7 2f31      	MOV  R19,R17
0002e8 ff01      	SBRS R16,1
0002e9 c017      	RJMP _0x202004F
                 _0x2020050:
0002ea 3030      	CPI  R19,0
0002eb f0a1      	BREQ _0x2020052
0002ec ff03      	SBRS R16,3
0002ed c006      	RJMP _0x2020053
0002ee 81ee      	LDD  R30,Y+6
0002ef 81ff      	LDD  R31,Y+6+1
0002f0 9125      	LPM  R18,Z+
0002f1 83ee      	STD  Y+6,R30
0002f2 83ff      	STD  Y+6+1,R31
0002f3 c005      	RJMP _0x2020054
                 _0x2020053:
0002f4 81ae      	LDD  R26,Y+6
0002f5 81bf      	LDD  R27,Y+6+1
0002f6 912d      	LD   R18,X+
0002f7 83ae      	STD  Y+6,R26
0002f8 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0002f9 940e 03c9 	CALL SUBOPT_0x4
0002fb 3050      	CPI  R21,0
0002fc f009      	BREQ _0x2020055
0002fd 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0002fe 5031      	SUBI R19,LOW(1)
0002ff cfea      	RJMP _0x2020050
                 _0x2020052:
000300 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000301 e320      	LDI  R18,LOW(48)
000302 81ee      	LDD  R30,Y+6
000303 81ff      	LDD  R31,Y+6+1
000304 940e 0413 	CALL __GETW1PF
000306 87e8      	STD  Y+8,R30
000307 87f9      	STD  Y+8+1,R31
000308 81ee      	LDD  R30,Y+6
000309 81ff      	LDD  R31,Y+6+1
00030a 9632      	ADIW R30,2
00030b 83ee      	STD  Y+6,R30
00030c 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00030d 85e8      	LDD  R30,Y+8
00030e 85f9      	LDD  R31,Y+8+1
00030f 85aa      	LDD  R26,Y+10
000310 85bb      	LDD  R27,Y+10+1
000311 17ae      	CP   R26,R30
000312 07bf      	CPC  R27,R31
000313 f050      	BRLO _0x202005C
000314 5f2f      	SUBI R18,-LOW(1)
000315 85a8      	LDD  R26,Y+8
000316 85b9      	LDD  R27,Y+8+1
000317 85ea      	LDD  R30,Y+10
000318 85fb      	LDD  R31,Y+10+1
000319 1bea      	SUB  R30,R26
00031a 0bfb      	SBC  R31,R27
00031b 87ea      	STD  Y+10,R30
00031c 87fb      	STD  Y+10+1,R31
00031d cfef      	RJMP _0x202005A
                 _0x202005C:
00031e 332a      	CPI  R18,58
00031f f028      	BRLO _0x202005D
000320 ff03      	SBRS R16,3
000321 c002      	RJMP _0x202005E
000322 5f29      	SUBI R18,-LOW(7)
000323 c001      	RJMP _0x202005F
                 _0x202005E:
000324 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000325 fd04      	SBRC R16,4
000326 c01a      	RJMP _0x2020061
000327 3321      	CPI  R18,49
000328 f420      	BRSH _0x2020063
000329 85a8      	LDD  R26,Y+8
00032a 85b9      	LDD  R27,Y+8+1
00032b 9711      	SBIW R26,1
00032c f409      	BRNE _0x2020062
                 _0x2020063:
00032d c009      	RJMP _0x20200CD
                 _0x2020062:
00032e 1753      	CP   R21,R19
00032f f010      	BRLO _0x2020067
000330 ff00      	SBRS R16,0
000331 c001      	RJMP _0x2020068
                 _0x2020067:
000332 c013      	RJMP _0x2020066
                 _0x2020068:
000333 e220      	LDI  R18,LOW(32)
000334 ff07      	SBRS R16,7
000335 c00b      	RJMP _0x2020069
000336 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000337 6100      	ORI  R16,LOW(16)
000338 ff02      	SBRS R16,2
000339 c007      	RJMP _0x202006A
00033a 7f0b      	ANDI R16,LOW(251)
00033b 934a      	ST   -Y,R20
00033c 940e 03d6 	CALL SUBOPT_0x6
00033e 3050      	CPI  R21,0
00033f f009      	BREQ _0x202006B
000340 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
000341 940e 03c9 	CALL SUBOPT_0x4
000343 3050      	CPI  R21,0
000344 f009      	BREQ _0x202006C
000345 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000346 5031      	SUBI R19,LOW(1)
000347 85a8      	LDD  R26,Y+8
000348 85b9      	LDD  R27,Y+8+1
000349 9712      	SBIW R26,2
00034a f008      	BRLO _0x2020059
00034b cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
00034c ff00      	SBRS R16,0
00034d c008      	RJMP _0x202006D
                 _0x202006E:
00034e 3050      	CPI  R21,0
00034f f031      	BREQ _0x2020070
000350 5051      	SUBI R21,LOW(1)
000351 e2e0      	LDI  R30,LOW(32)
000352 93ea      	ST   -Y,R30
000353 940e 03d6 	CALL SUBOPT_0x6
000355 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000356 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000357 cee0      	RJMP _0x2020016
                 _0x2020018:
000358 85ac      	LDD  R26,Y+12
000359 85bd      	LDD  R27,Y+12+1
00035a 940e 040f 	CALL __GETW1P
00035c 940e 0423 	CALL __LOADLOCR6
00035e 9664      	ADIW R28,20
00035f 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000360 92ff      	PUSH R15
000361 2ef8      	MOV  R15,R24
000362 9726      	SBIW R28,6
000363 940e 041e 	CALL __SAVELOCR4
000365 940e 03ee 	CALL SUBOPT_0x9
000367 9730      	SBIW R30,0
000368 f419      	BRNE _0x2020072
000369 efef      	LDI  R30,LOW(65535)
00036a efff      	LDI  R31,HIGH(65535)
00036b c023      	RJMP _0x2080001
                 _0x2020072:
00036c 01de      	MOVW R26,R28
00036d 9616      	ADIW R26,6
00036e 940e 03ff 	CALL __ADDW2R15
000370 018d      	MOVW R16,R26
000371 940e 03ee 	CALL SUBOPT_0x9
000373 83ee      	STD  Y+6,R30
000374 83ff      	STD  Y+6+1,R31
000375 e0e0      	LDI  R30,LOW(0)
000376 87e8      	STD  Y+8,R30
000377 87e9      	STD  Y+8+1,R30
000378 01de      	MOVW R26,R28
000379 961a      	ADIW R26,10
00037a 940e 03ff 	CALL __ADDW2R15
00037c 940e 040f 	CALL __GETW1P
00037e 93fa      	ST   -Y,R31
00037f 93ea      	ST   -Y,R30
000380 931a      	ST   -Y,R17
000381 930a      	ST   -Y,R16
000382 eeec      	LDI  R30,LOW(_put_buff_G101)
000383 e0f1      	LDI  R31,HIGH(_put_buff_G101)
000384 93fa      	ST   -Y,R31
000385 93ea      	ST   -Y,R30
000386 01de      	MOVW R26,R28
000387 961a      	ADIW R26,10
000388 dea3      	RCALL __print_G101
000389 019f      	MOVW R18,R30
00038a 81ae      	LDD  R26,Y+6
00038b 81bf      	LDD  R27,Y+6+1
00038c e0e0      	LDI  R30,LOW(0)
00038d 93ec      	ST   X,R30
00038e 01f9      	MOVW R30,R18
                 _0x2080001:
00038f 940e 0425 	CALL __LOADLOCR4
000391 962a      	ADIW R28,10
000392 90ff      	POP  R15
000393 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000394 93ba      	ST   -Y,R27
000395 93aa      	ST   -Y,R26
000396 91a9          ld   r26,y+
000397 91b9          ld   r27,y+
000398 27ee          clr  r30
000399 27ff          clr  r31
                 strlen0:
00039a 916d          ld   r22,x+
00039b 2366          tst  r22
00039c f011          breq strlen1
00039d 9631          adiw r30,1
00039e cffb          rjmp strlen0
                 strlen1:
00039f 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003a0 93ba      	ST   -Y,R27
0003a1 93aa      	ST   -Y,R26
0003a2 27aa          clr  r26
0003a3 27bb          clr  r27
0003a4 91e9          ld   r30,y+
0003a5 91f9          ld   r31,y+
                 strlenf0:
0003a6 9005      	lpm  r0,z+
0003a7 2000          tst  r0
0003a8 f011          breq strlenf1
0003a9 9611          adiw r26,1
0003aa cffb          rjmp strlenf0
                 strlenf1:
0003ab 01fd          movw r30,r26
0003ac 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _buffer:
0001a7           	.BYTE 0x10
                 _map:
0001b7           	.BYTE 0x10
                 __base_y_G100:
0001c7           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
0003ad 940e 018c 	CALL _lcd_clear
0003af e0e0      	LDI  R30,LOW(0)
0003b0 93ea      	ST   -Y,R30
0003b1 e0a0      	LDI  R26,LOW(0)
0003b2 940c 017f 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
0003b4 940e 01ad 	CALL _lcd_puts
0003b6 e0e0      	LDI  R30,LOW(0)
0003b7 93ea      	ST   -Y,R30
0003b8 e0a1      	LDI  R26,LOW(1)
0003b9 940c 017f 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0003bb 940e 0173 	CALL __lcd_write_data
0003bd e0a3      	LDI  R26,LOW(3)
0003be e0b0      	LDI  R27,0
0003bf 940c 03f5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
0003c1 e3a0      	LDI  R26,LOW(48)
0003c2 940e 015f 	CALL __lcd_write_nibble_G100
                +
0003c4 ec88     +LDI R24 , LOW ( 200 )
0003c5 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003c6 9701     +SBIW R24 , 1
0003c7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
0003c9 932a      	ST   -Y,R18
0003ca 85ad      	LDD  R26,Y+13
0003cb 85be      	LDD  R27,Y+13+1
0003cc 85ef      	LDD  R30,Y+15
0003cd 89f8      	LDD  R31,Y+15+1
0003ce 9509      	ICALL
0003cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
0003d0 89e8      	LDD  R30,Y+16
0003d1 89f9      	LDD  R31,Y+16+1
0003d2 9734      	SBIW R30,4
0003d3 8be8      	STD  Y+16,R30
0003d4 8bf9      	STD  Y+16+1,R31
0003d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0003d6 85ad      	LDD  R26,Y+13
0003d7 85be      	LDD  R27,Y+13+1
0003d8 85ef      	LDD  R30,Y+15
0003d9 89f8      	LDD  R31,Y+15+1
0003da 9509      	ICALL
0003db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
0003dc 89a8      	LDD  R26,Y+16
0003dd 89b9      	LDD  R27,Y+16+1
0003de 9614      	ADIW R26,4
0003df 940e 040f 	CALL __GETW1P
0003e1 83ee      	STD  Y+6,R30
0003e2 83ff      	STD  Y+6+1,R31
0003e3 81ae      	LDD  R26,Y+6
0003e4 81bf      	LDD  R27,Y+6+1
0003e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
0003e6 89a8      	LDD  R26,Y+16
0003e7 89b9      	LDD  R27,Y+16+1
0003e8 9614      	ADIW R26,4
0003e9 940e 040f 	CALL __GETW1P
0003eb 87ea      	STD  Y+10,R30
0003ec 87fb      	STD  Y+10+1,R31
0003ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0003ee 01de      	MOVW R26,R28
0003ef 961c      	ADIW R26,12
0003f0 940e 03ff 	CALL __ADDW2R15
0003f2 940e 040f 	CALL __GETW1P
0003f4 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003f5 9610      	adiw r26,0
0003f6 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003f7 ed80     +LDI R24 , LOW ( 0x7D0 )
0003f8 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003f9 9701     +SBIW R24 , 1
0003fa f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003fb 95a8      	wdr
0003fc 9711      	sbiw r26,1
0003fd f7c9      	brne __delay_ms0
                 __delay_ms1:
0003fe 9508      	ret
                 
                 __ADDW2R15:
0003ff 2400      	CLR  R0
000400 0daf      	ADD  R26,R15
000401 1db0      	ADC  R27,R0
000402 9508      	RET
                 
                 __ANEGW1:
000403 95f1      	NEG  R31
000404 95e1      	NEG  R30
000405 40f0      	SBCI R31,0
000406 9508      	RET
                 
                 __LSRB12:
000407 23ee      	TST  R30
000408 2e0e      	MOV  R0,R30
000409 2fea      	MOV  R30,R26
00040a f019      	BREQ __LSRB12R
                 __LSRB12L:
00040b 95e6      	LSR  R30
00040c 940a      	DEC  R0
00040d f7e9      	BRNE __LSRB12L
                 __LSRB12R:
00040e 9508      	RET
                 
                 __GETW1P:
00040f 91ed      	LD   R30,X+
000410 91fc      	LD   R31,X
000411 9711      	SBIW R26,1
000412 9508      	RET
                 
                 __GETW1PF:
000413 9005      	LPM  R0,Z+
000414 91f4      	LPM  R31,Z
000415 2de0      	MOV  R30,R0
000416 9508      	RET
                 
                 __PUTPARD1:
000417 937a      	ST   -Y,R23
000418 936a      	ST   -Y,R22
000419 93fa      	ST   -Y,R31
00041a 93ea      	ST   -Y,R30
00041b 9508      	RET
                 
                 __SAVELOCR6:
00041c 935a      	ST   -Y,R21
                 __SAVELOCR5:
00041d 934a      	ST   -Y,R20
                 __SAVELOCR4:
00041e 933a      	ST   -Y,R19
                 __SAVELOCR3:
00041f 932a      	ST   -Y,R18
                 __SAVELOCR2:
000420 931a      	ST   -Y,R17
000421 930a      	ST   -Y,R16
000422 9508      	RET
                 
                 __LOADLOCR6:
000423 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000424 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000425 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000426 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000427 8119      	LDD  R17,Y+1
000428 8108      	LD   R16,Y
000429 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  16 r1 :   5 r2 :   7 r3 :   0 r4 :  13 r5 :   6 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  41 r17:  36 r18:  33 r19:  10 r20:   9 r21:  17 r22:   6 r23:   2 
r24:  23 r25:   5 r26: 115 r27:  44 r28:  14 r29:   1 r30: 202 r31:  65 
x  :  23 y  : 171 z  :  16 
Registers used: 28 out of 35 (80.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   6 
adiw  :  24 and   :   1 andi  :   6 asr   :   0 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  20 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   9 
brlt  :   0 brmi  :   1 brne  :  41 brpl  :   1 brsh  :   5 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  58 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   9 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :  14 cpc   :   3 cpi   :  36 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   5 inc   :   2 jmp   :  25 ld    :  28 ldd   :  77 ldi   : 122 
lds   :   0 lpm   :  14 lsl   :   0 lsr   :   1 mov   :  30 movw  :  20 
mul   :   4 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   8 out   :  11 pop   :   1 push  :   1 rcall :  18 ret   :  26 
reti  :   0 rjmp  :  74 rol   :   0 ror   :   0 sbc   :   1 sbci  :   3 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  20 sbr   :   0 sbrc  :   5 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  62 std   :  31 sts   :   2 sub   :   1 subi  :  19 swap  :   1 
tst   :   6 wdr   :   1 
Instructions used: 57 out of 116 (49.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000854   1960    172   2132   16384  13.0%
[.dseg] 0x000060 0x0001cb      0    107    107    1024  10.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
