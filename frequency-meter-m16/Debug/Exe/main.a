;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <alcd.h>
;
;typedef unsigned long ulong;
;
;typedef unsigned int uint;
;
;typedef unsigned int uchar;
;
;ulong glob = 0;
;ulong last_m = 0;
;char buffer[16];
;ulong pc[2];
;ulong pc_m[2];
;bit c = 0;
;ulong tick = 0, tick2 = 0;
;float freq = 0, freq_s = 0;
;float dc = 0, dc_s = 0;
;
;
;float lerp(float a, float b, float dt){
; 0000 0017 float lerp(float a, float b, float dt){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0018     return a + (b-a) * dt;
;PCODE: $0000000F VOL: 0
;	a -> Y+8
;	b -> Y+4
;	dt -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0019 }
;PCODE: $00000019 VOL: 0
;
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 001C {
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 001D     pc[c] = tick - pc_m[!c];
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 001E     pc_m[c] = tick;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 001F     c = !PIND.2;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0020     tick2++;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0021 }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0024 {
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0025     TCNT1H=0xE0C0 >> 8;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0026     TCNT1L=0xE0C0 & 0xff;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0027     glob++;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0028 }
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;
;void main(void)
; 0000 002B {
;PCODE: $0000004F VOL: 0
; 0000 002C 
; 0000 002D 
; 0000 002E     // Timer/Counter 1 initialization
; 0000 002F     // Clock source: System Clock
; 0000 0030     // Clock value: 8000.000 kHz
; 0000 0031     // Mode: Normal top=0xFFFF
; 0000 0032     // OC1A output: Disconnected
; 0000 0033     // OC1B output: Disconnected
; 0000 0034     // Noise Canceler: Off
; 0000 0035     // Input Capture on Falling Edge
; 0000 0036     // Timer Period: 1 us
; 0000 0037     // Timer1 Overflow Interrupt: On
; 0000 0038     // Input Capture Interrupt: Off
; 0000 0039     // Compare A Match Interrupt: Off
; 0000 003A     // Compare B Match Interrupt: Off
; 0000 003B     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 003C     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 003D     TCNT1H=0xFF;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 003E     TCNT1L=0xF8;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 003F     ICR1H=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0040     ICR1L=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0041     OCR1AH=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0042     OCR1AL=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0043     OCR1BH=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0044     OCR1BL=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0045 
; 0000 0046 
; 0000 0047     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0048     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0049 
; 0000 004A     // External Interrupt(s) initialization
; 0000 004B     // INT0: On
; 0000 004C     // INT0 Mode: Any change
; 0000 004D     // INT1: Off
; 0000 004E     // INT2: Off
; 0000 004F     GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0050     MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (1<<ISC00);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0051     MCUCSR=(0<<ISC2);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0052     GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0053 
; 0000 0054     lcd_init(16);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0055 
; 0000 0056     #asm("sei")
;PCODE: $00000071 VOL: 0
	sei
;PCODE: $00000072 VOL: 0
; 0000 0057 
; 0000 0058     while (1)
;PCODE: $00000073 VOL: 0
; 0000 0059     {
; 0000 005A         if(glob - last_m >= 1000){
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 005B 
; 0000 005C             dc = ((float)pc[0]/(float)(pc[0]+pc[1]))*100.0f;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 005D             freq = (float)tick2 / 2.0f;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 005E             tick2 = 0;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 005F             last_m = glob;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0060         }
; 0000 0061         if(glob % 100 == 0){
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0062             freq_s = lerp(freq_s, freq, 0.6f);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0063             dc_s = lerp(dc_s, dc, 0.6f);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0064 
; 0000 0065             lcd_gotoxy(0,0);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0066             sprintf(buffer, "dc: %f", dc_s);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0067             lcd_puts(buffer);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0068             lcd_gotoxy(0,1);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0069 
; 0000 006A 
; 0000 006B             sprintf(buffer, "freq: %f", freq_s);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 006C             lcd_puts(buffer);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 006D 
; 0000 006E         }
; 0000 006F 
; 0000 0070         tick++;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0071     }
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0072 }
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
